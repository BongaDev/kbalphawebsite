/**
 * @fileoverview added by tsickle
 * Generated from: src/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, of } from 'rxjs';
import { map, publishReplay, refCount } from 'rxjs/operators';
/**
 * @param {?} animation
 * @return {?}
 */
export function transformAnimationFilenameToKey(animation) {
    return `animation-${animation.split('.json')[0]}`;
}
/**
 * @param {?} options
 * @param {?} container
 * @param {?} animationCache
 * @return {?}
 */
export function mergeOptionsWithDefault(options, container, animationCache) {
    /** @type {?} */
    const merged = Object.assign({
        container,
        renderer: 'svg',
        loop: true,
        autoplay: true,
    }, options);
    return animationCache !== null ? animationCache.transformOptions(merged) : merged;
}
/**
 * @param {?} options
 * @return {?}
 */
export function isAnimationConfigWithData(options) {
    /** @type {?} */
    const animationData = ((/** @type {?} */ (options))).animationData;
    return animationData !== null && typeof animationData === 'object';
}
/**
 * @param {?} animationCache
 * @param {?} options
 * @param {?} animationItem
 * @return {?}
 */
export function awaitConfigAndCache(animationCache, options, animationItem) {
    if (animationCache === null) {
        return;
    }
    animationItem.addEventListener('config_ready', (/**
     * @return {?}
     */
    () => {
        animationCache.set(options, animationItem);
    }));
}
/**
 * @param {?} player
 * @return {?}
 */
export function streamifyPlayerOrLoader(player) {
    /** @type {?} */
    const playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map((/**
         * @param {?} module
         * @return {?}
         */
        module => module.default || module)), publishReplay(1), refCount());
    }
    else {
        return of(playerOrLoader);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBYTlELE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxTQUE0QjtJQUMxRSxPQUFPLGFBQWEsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BELENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLE9BQWdDLEVBQ2hDLFNBQXNCLEVBQ3RCLGNBQXFDOztVQUUvQixNQUFNLEdBQXNELE1BQU0sQ0FBQyxNQUFNLENBQzdFO1FBQ0UsU0FBUztRQUNULFFBQVEsRUFBRSxLQUFLO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLEVBQ0QsT0FBTyxDQUNSO0lBRUQsT0FBTyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNwRixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FDdkMsT0FBMEQ7O1VBRXBELGFBQWEsR0FBRyxDQUFDLG1CQUFBLE9BQU8sRUFBMkIsQ0FBQyxDQUFDLGFBQWE7SUFDeEUsT0FBTyxhQUFhLEtBQUssSUFBSSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsQ0FBQztBQUNyRSxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxjQUFxQyxFQUNyQyxPQUEwRCxFQUMxRCxhQUE0QjtJQUU1QixJQUFJLGNBQWMsS0FBSyxJQUFJLEVBQUU7UUFDM0IsT0FBTztLQUNSO0lBRUQsYUFBYSxDQUFDLGdCQUFnQixDQUFDLGNBQWM7OztJQUFFLEdBQUcsRUFBRTtRQUNsRCxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDLEVBQUMsQ0FBQztBQUNMLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxNQUFtQzs7VUFFN0IsY0FBYyxHQUFHLE1BQU0sRUFBRTtJQUUvQixJQUFJLGNBQWMsWUFBWSxPQUFPLEVBQUU7UUFDckMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBQyxFQUN2QyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQ2hCLFFBQVEsRUFBRSxDQUNYLENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDM0I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbSwgb2YsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gIExvdHRpZVBsYXllcixcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uRmlsZW5hbWUsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuICBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgTG90dGllUGxheWVyRmFjdG9yeU9yTG9hZGVyLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2FjaGUgfSBmcm9tICcuL2FuaW1hdGlvbi1jYWNoZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5KGFuaW1hdGlvbjogQW5pbWF0aW9uRmlsZW5hbWUpOiBzdHJpbmcge1xuICByZXR1cm4gYGFuaW1hdGlvbi0ke2FuaW1hdGlvbi5zcGxpdCgnLmpzb24nKVswXX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zV2l0aERlZmF1bHQoXG4gIG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMgfCBudWxsLFxuICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICBhbmltYXRpb25DYWNoZTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsLFxuKTogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gIGNvbnN0IG1lcmdlZDogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgY29udGFpbmVyLFxuICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgIH0sXG4gICAgb3B0aW9ucyxcbiAgKTtcblxuICByZXR1cm4gYW5pbWF0aW9uQ2FjaGUgIT09IG51bGwgPyBhbmltYXRpb25DYWNoZS50cmFuc2Zvcm1PcHRpb25zKG1lcmdlZCkgOiBtZXJnZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhKFxuICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoUGF0aCB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuKTogb3B0aW9ucyBpcyBBbmltYXRpb25Db25maWdXaXRoRGF0YSB7XG4gIGNvbnN0IGFuaW1hdGlvbkRhdGEgPSAob3B0aW9ucyBhcyBBbmltYXRpb25Db25maWdXaXRoRGF0YSkuYW5pbWF0aW9uRGF0YTtcbiAgcmV0dXJuIGFuaW1hdGlvbkRhdGEgIT09IG51bGwgJiYgdHlwZW9mIGFuaW1hdGlvbkRhdGEgPT09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRDb25maWdBbmRDYWNoZShcbiAgYW5pbWF0aW9uQ2FjaGU6IEFuaW1hdGlvbkNhY2hlIHwgbnVsbCxcbiAgb3B0aW9uczogQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGggfCBBbmltYXRpb25Db25maWdXaXRoRGF0YSxcbiAgYW5pbWF0aW9uSXRlbTogQW5pbWF0aW9uSXRlbSxcbik6IHZvaWQge1xuICBpZiAoYW5pbWF0aW9uQ2FjaGUgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhbmltYXRpb25JdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbmZpZ19yZWFkeScsICgpID0+IHtcbiAgICBhbmltYXRpb25DYWNoZS5zZXQob3B0aW9ucywgYW5pbWF0aW9uSXRlbSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyZWFtaWZ5UGxheWVyT3JMb2FkZXIoXG4gIHBsYXllcjogTG90dGllUGxheWVyRmFjdG9yeU9yTG9hZGVyLFxuKTogT2JzZXJ2YWJsZTxMb3R0aWVQbGF5ZXI+IHtcbiAgY29uc3QgcGxheWVyT3JMb2FkZXIgPSBwbGF5ZXIoKTtcblxuICBpZiAocGxheWVyT3JMb2FkZXIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgcmV0dXJuIGZyb20ocGxheWVyT3JMb2FkZXIpLnBpcGUoXG4gICAgICBtYXAobW9kdWxlID0+IG1vZHVsZS5kZWZhdWx0IHx8IG1vZHVsZSksXG4gICAgICBwdWJsaXNoUmVwbGF5KDEpLFxuICAgICAgcmVmQ291bnQoKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvZihwbGF5ZXJPckxvYWRlcik7XG4gIH1cbn1cbiJdfQ==