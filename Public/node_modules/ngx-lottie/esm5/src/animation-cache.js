/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-cache.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isAnimationConfigWithData } from './utils';
var AnimationCache = /** @class */ (function () {
    function AnimationCache() {
        this.cache = new Map();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    AnimationCache.create = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return options.useCache ? new AnimationCache() : null;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AnimationCache.prototype.transformOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var path = ((/** @type {?} */ (options))).path;
        if (path && this.cache.has(path)) {
            delete ((/** @type {?} */ (options))).path;
            ((/** @type {?} */ (options))).animationData = this.cache.get(path);
        }
        return options;
    };
    /**
     * @param {?} options
     * @param {?} animationItem
     * @return {?}
     */
    AnimationCache.prototype.set = /**
     * @param {?} options
     * @param {?} animationItem
     * @return {?}
     */
    function (options, animationItem) {
        if (isAnimationConfigWithData(options)) {
            return;
        }
        /** @type {?} */
        var animationData = animationItem['animationData'];
        this.cache.set((/** @type {?} */ (options.path)), animationData);
    };
    return AnimationCache;
}());
export { AnimationCache };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationCache.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWNhY2hlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvdHRpZS8iLCJzb3VyY2VzIjpbInNyYy9hbmltYXRpb24tY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFNQSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEQ7SUFBQTtRQUNVLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztJQTRCN0MsQ0FBQzs7Ozs7SUExQlEscUJBQU07Ozs7SUFBYixVQUFjLE9BQXNCO1FBQ2xDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hELENBQUM7Ozs7O0lBRUQseUNBQWdCOzs7O0lBQWhCLFVBQ0UsT0FBMEQ7O1lBRXBELElBQUksR0FBRyxDQUFDLG1CQUFBLE9BQU8sRUFBMkIsQ0FBQyxDQUFDLElBQUk7UUFDdEQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxDQUFDLG1CQUFBLE9BQU8sRUFBMkIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNqRCxDQUFDLG1CQUFBLE9BQU8sRUFBMkIsQ0FBQyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzRTtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVELDRCQUFHOzs7OztJQUFILFVBQ0UsT0FBMEQsRUFDMUQsYUFBNEI7UUFFNUIsSUFBSSx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0QyxPQUFPO1NBQ1I7O1lBRUssYUFBYSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUM7UUFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsbUJBQUEsT0FBTyxDQUFDLElBQUksRUFBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUE3QkQsSUE2QkM7Ozs7Ozs7SUE1QkMsK0JBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTG90dGllT3B0aW9ucyxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgaXNBbmltYXRpb25Db25maWdXaXRoRGF0YSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uQ2FjaGUge1xuICBwcml2YXRlIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIHVua25vd24+KCk7XG5cbiAgc3RhdGljIGNyZWF0ZShvcHRpb25zOiBMb3R0aWVPcHRpb25zKTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsIHtcbiAgICByZXR1cm4gb3B0aW9ucy51c2VDYWNoZSA/IG5ldyBBbmltYXRpb25DYWNoZSgpIDogbnVsbDtcbiAgfVxuXG4gIHRyYW5zZm9ybU9wdGlvbnMoXG4gICAgb3B0aW9uczogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgKTogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gICAgY29uc3QgcGF0aCA9IChvcHRpb25zIGFzIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoKS5wYXRoO1xuICAgIGlmIChwYXRoICYmIHRoaXMuY2FjaGUuaGFzKHBhdGgpKSB7XG4gICAgICBkZWxldGUgKG9wdGlvbnMgYXMgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgpLnBhdGg7XG4gICAgICAob3B0aW9ucyBhcyBBbmltYXRpb25Db25maWdXaXRoRGF0YSkuYW5pbWF0aW9uRGF0YSA9IHRoaXMuY2FjaGUuZ2V0KHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHNldChcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICAgIGFuaW1hdGlvbkl0ZW06IEFuaW1hdGlvbkl0ZW0sXG4gICk6IHZvaWQge1xuICAgIGlmIChpc0FuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhKG9wdGlvbnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYW5pbWF0aW9uRGF0YSA9IGFuaW1hdGlvbkl0ZW1bJ2FuaW1hdGlvbkRhdGEnXTtcbiAgICB0aGlzLmNhY2hlLnNldChvcHRpb25zLnBhdGghLCBhbmltYXRpb25EYXRhKTtcbiAgfVxufVxuIl19