/**
 * @fileoverview added by tsickle
 * Generated from: src/base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Subject } from 'rxjs';
import { AnimationLoader } from './animation-loader';
var BaseDirective = /** @class */ (function () {
    function BaseDirective(platformId, animationLoader) {
        this.platformId = platformId;
        this.animationLoader = animationLoader;
        this.options = null;
        this.containerClass = null;
        this.styles = null;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`
         */
        this.animationCreated = new EventEmitter();
        /**
         * `complete` is dispatched after completing the last frame
         */
        this.complete = new EventEmitter();
        /**
         * `loopComplete` is dispatched after completing frame loop
         */
        this.loopComplete = new EventEmitter();
        /**
         * `enterFrame` is dispatched after entering the new frame
         */
        this.enterFrame = new EventEmitter();
        /**
         * `segmentStart` is dispatched when the new segment is adjusted
         */
        this.segmentStart = new EventEmitter();
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured
         */
        this.configReady = new EventEmitter();
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded
         */
        this.dataReady = new EventEmitter();
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM
         */
        this.domLoaded = new EventEmitter();
        /**
         * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
         * it's useful for releasing resources
         */
        this.destroy = new EventEmitter();
        /**
         * `error` will be dispatched if the lottie player could not render
         * some frame or parse config
         */
        this.error = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    BaseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @protected
     * @param {?} changes
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    BaseDirective.prototype.loadAnimation = /**
     * @protected
     * @param {?} changes
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    function (changes, container, eventsFacade, instance) {
        if (isPlatformServer(this.platformId) || !changes.options) {
            return;
        }
        eventsFacade.destroyAnimation();
        this.animationLoader.resolveLoaderAndLoadAnimation(changes.options.currentValue, container, eventsFacade, this.animationCreated, instance, this.destroy$);
    };
    BaseDirective.decorators = [
        { type: Directive, args: [{ selector: '[lottie]' },] }
    ];
    /** @nocollapse */
    BaseDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: AnimationLoader }
    ]; };
    BaseDirective.propDecorators = {
        options: [{ type: Input }],
        containerClass: [{ type: Input }],
        styles: [{ type: Input }],
        animationCreated: [{ type: Output }],
        complete: [{ type: Output }],
        loopComplete: [{ type: Output }],
        enterFrame: [{ type: Output }],
        segmentStart: [{ type: Output }],
        configReady: [{ type: Output }],
        dataReady: [{ type: Output }],
        domLoaded: [{ type: Output }],
        destroy: [{ type: Output }],
        error: [{ type: Output }]
    };
    return BaseDirective;
}());
export { BaseDirective };
if (false) {
    /** @type {?} */
    BaseDirective.prototype.options;
    /** @type {?} */
    BaseDirective.prototype.containerClass;
    /** @type {?} */
    BaseDirective.prototype.styles;
    /**
     * `animationCreated` is dispatched after calling `loadAnimation`
     * @type {?}
     */
    BaseDirective.prototype.animationCreated;
    /**
     * `complete` is dispatched after completing the last frame
     * @type {?}
     */
    BaseDirective.prototype.complete;
    /**
     * `loopComplete` is dispatched after completing frame loop
     * @type {?}
     */
    BaseDirective.prototype.loopComplete;
    /**
     * `enterFrame` is dispatched after entering the new frame
     * @type {?}
     */
    BaseDirective.prototype.enterFrame;
    /**
     * `segmentStart` is dispatched when the new segment is adjusted
     * @type {?}
     */
    BaseDirective.prototype.segmentStart;
    /**
     * Original event name is `config_ready`. `config_ready` is dispatched
     * after the needed renderer is configured
     * @type {?}
     */
    BaseDirective.prototype.configReady;
    /**
     * Original event name is `data_ready`. `data_ready` is dispatched
     * when all parts of the animation have been loaded
     * @type {?}
     */
    BaseDirective.prototype.dataReady;
    /**
     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
     * when elements have been added to the DOM
     * @type {?}
     */
    BaseDirective.prototype.domLoaded;
    /**
     * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
     * it's useful for releasing resources
     * @type {?}
     */
    BaseDirective.prototype.destroy;
    /**
     * `error` will be dispatched if the lottie player could not render
     * some frame or parse config
     * @type {?}
     */
    BaseDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.animationLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL2Jhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFhL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3JEO0lBaUVFLHVCQUMrQixVQUFrQixFQUN2QyxlQUFnQztRQURYLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDdkMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBakVqQyxZQUFPLEdBQTRCLElBQUksQ0FBQztRQUV4QyxtQkFBYyxHQUFrQixJQUFJLENBQUM7UUFFckMsV0FBTSxHQUF3QyxJQUFJLENBQUM7Ozs7UUFLbEQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7Ozs7UUFLckQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDOzs7O1FBSy9DLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7Ozs7UUFLdkQsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDOzs7O1FBS25ELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7Ozs7O1FBTXZELGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7Ozs7UUFNdkMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7O1FBTXJDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDOzs7OztRQU1yQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7Ozs7O1FBTTdDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBZ0QsQ0FBQztRQUUzRSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUtwQyxDQUFDOzs7O0lBRUosbUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7Ozs7OztJQUVTLHFDQUFhOzs7Ozs7OztJQUF2QixVQUNFLE9BQXNCLEVBQ3RCLFNBQXNCLEVBQ3RCLFlBQWdDLEVBQ2hDLFFBQXVCO1FBRXZCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUN6RCxPQUFPO1NBQ1I7UUFFRCxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUVoQyxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUNoRCxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksRUFDNUIsU0FBUyxFQUNULFlBQVksRUFDWixJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLFFBQVEsRUFDUixJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7SUFDSixDQUFDOztnQkEvRkYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTs7Ozs2Q0FrRTlCLE1BQU0sU0FBQyxXQUFXO2dCQXJFZCxlQUFlOzs7MEJBS3JCLEtBQUs7aUNBRUwsS0FBSzt5QkFFTCxLQUFLO21DQUtMLE1BQU07MkJBS04sTUFBTTsrQkFLTixNQUFNOzZCQUtOLE1BQU07K0JBS04sTUFBTTs4QkFNTixNQUFNOzRCQU1OLE1BQU07NEJBTU4sTUFBTTswQkFNTixNQUFNO3dCQU1OLE1BQU07O0lBbUNULG9CQUFDO0NBQUEsQUFoR0QsSUFnR0M7U0EvRlksYUFBYTs7O0lBQ3hCLGdDQUFpRDs7SUFFakQsdUNBQThDOztJQUU5QywrQkFBNEQ7Ozs7O0lBSzVELHlDQUErRDs7Ozs7SUFLL0QsaUNBQXlEOzs7OztJQUt6RCxxQ0FBaUU7Ozs7O0lBS2pFLG1DQUE2RDs7Ozs7SUFLN0QscUNBQWlFOzs7Ozs7SUFNakUsb0NBQWlEOzs7Ozs7SUFNakQsa0NBQStDOzs7Ozs7SUFNL0Msa0NBQStDOzs7Ozs7SUFNL0MsZ0NBQXVEOzs7Ozs7SUFNdkQsOEJBQW1GOzs7OztJQUVuRixpQ0FBdUM7Ozs7O0lBR3JDLG1DQUErQzs7Ozs7SUFDL0Msd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgUExBVEZPUk1fSUQsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBBbmltYXRpb25PcHRpb25zLFxuICBCTUNvbXBsZXRlRXZlbnQsXG4gIEJNQ29tcGxldGVMb29wRXZlbnQsXG4gIEJNRW50ZXJGcmFtZUV2ZW50LFxuICBCTVNlZ21lbnRTdGFydEV2ZW50LFxuICBCTURlc3Ryb3lFdmVudCxcbiAgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQsXG4gIEJNQ29uZmlnRXJyb3JFdmVudCxcbiAgQW5pbWF0aW9uSXRlbSxcbn0gZnJvbSAnLi9zeW1ib2xzJztcbmltcG9ydCB7IEFuaW1hdGlvbkxvYWRlciB9IGZyb20gJy4vYW5pbWF0aW9uLWxvYWRlcic7XG5pbXBvcnQgeyBMb3R0aWVFdmVudHNGYWNhZGUgfSBmcm9tICcuL2V2ZW50cy1mYWNhZGUnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbG90dGllXScgfSlcbmV4cG9ydCBjbGFzcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgQElucHV0KCkgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwgPSBudWxsO1xuXG4gIEBJbnB1dCgpIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBASW5wdXQoKSBzdHlsZXM6IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4gfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogYGFuaW1hdGlvbkNyZWF0ZWRgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgY2FsbGluZyBgbG9hZEFuaW1hdGlvbmBcbiAgICovXG4gIEBPdXRwdXQoKSBhbmltYXRpb25DcmVhdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxBbmltYXRpb25JdGVtPigpO1xuXG4gIC8qKlxuICAgKiBgY29tcGxldGVgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgY29tcGxldGluZyB0aGUgbGFzdCBmcmFtZVxuICAgKi9cbiAgQE91dHB1dCgpIGNvbXBsZXRlID0gbmV3IEV2ZW50RW1pdHRlcjxCTUNvbXBsZXRlRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBsb29wQ29tcGxldGVgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgY29tcGxldGluZyBmcmFtZSBsb29wXG4gICAqL1xuICBAT3V0cHV0KCkgbG9vcENvbXBsZXRlID0gbmV3IEV2ZW50RW1pdHRlcjxCTUNvbXBsZXRlTG9vcEV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBgZW50ZXJGcmFtZWAgaXMgZGlzcGF0Y2hlZCBhZnRlciBlbnRlcmluZyB0aGUgbmV3IGZyYW1lXG4gICAqL1xuICBAT3V0cHV0KCkgZW50ZXJGcmFtZSA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1FbnRlckZyYW1lRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBzZWdtZW50U3RhcnRgIGlzIGRpc3BhdGNoZWQgd2hlbiB0aGUgbmV3IHNlZ21lbnQgaXMgYWRqdXN0ZWRcbiAgICovXG4gIEBPdXRwdXQoKSBzZWdtZW50U3RhcnQgPSBuZXcgRXZlbnRFbWl0dGVyPEJNU2VnbWVudFN0YXJ0RXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIE9yaWdpbmFsIGV2ZW50IG5hbWUgaXMgYGNvbmZpZ19yZWFkeWAuIGBjb25maWdfcmVhZHlgIGlzIGRpc3BhdGNoZWRcbiAgICogYWZ0ZXIgdGhlIG5lZWRlZCByZW5kZXJlciBpcyBjb25maWd1cmVkXG4gICAqL1xuICBAT3V0cHV0KCkgY29uZmlnUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIE9yaWdpbmFsIGV2ZW50IG5hbWUgaXMgYGRhdGFfcmVhZHlgLiBgZGF0YV9yZWFkeWAgaXMgZGlzcGF0Y2hlZFxuICAgKiB3aGVuIGFsbCBwYXJ0cyBvZiB0aGUgYW5pbWF0aW9uIGhhdmUgYmVlbiBsb2FkZWRcbiAgICovXG4gIEBPdXRwdXQoKSBkYXRhUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIE9yaWdpbmFsIGV2ZW50IG5hbWUgaXMgYERPTUxvYWRlZGAuIGBET01Mb2FkZWRgIGlzIGRpc3BhdGNoZWRcbiAgICogd2hlbiBlbGVtZW50cyBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIERPTVxuICAgKi9cbiAgQE91dHB1dCgpIGRvbUxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogYGRlc3Ryb3lgIHdpbGwgYmUgZGlzcGF0Y2hlZCBpbiB0aGUgYG5nT25EZXN0cm95YCBob29rIG9mIHRoZSBzZXJ2aWNlLFxuICAgKiBpdCdzIHVzZWZ1bCBmb3IgcmVsZWFzaW5nIHJlc291cmNlc1xuICAgKi9cbiAgQE91dHB1dCgpIGRlc3Ryb3kgPSBuZXcgRXZlbnRFbWl0dGVyPEJNRGVzdHJveUV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBgZXJyb3JgIHdpbGwgYmUgZGlzcGF0Y2hlZCBpZiB0aGUgbG90dGllIHBsYXllciBjb3VsZCBub3QgcmVuZGVyXG4gICAqIHNvbWUgZnJhbWUgb3IgcGFyc2UgY29uZmlnXG4gICAqL1xuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEJNUmVuZGVyRnJhbWVFcnJvckV2ZW50IHwgQk1Db25maWdFcnJvckV2ZW50PigpO1xuXG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogc3RyaW5nLFxuICAgIHByaXZhdGUgYW5pbWF0aW9uTG9hZGVyOiBBbmltYXRpb25Mb2FkZXIsXG4gICkge31cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9hZEFuaW1hdGlvbihcbiAgICBjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzLFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsXG4gICAgaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsXG4gICk6IHZvaWQge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkgfHwgIWNoYW5nZXMub3B0aW9ucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50c0ZhY2FkZS5kZXN0cm95QW5pbWF0aW9uKCk7XG5cbiAgICB0aGlzLmFuaW1hdGlvbkxvYWRlci5yZXNvbHZlTG9hZGVyQW5kTG9hZEFuaW1hdGlvbihcbiAgICAgIGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBldmVudHNGYWNhZGUsXG4gICAgICB0aGlzLmFuaW1hdGlvbkNyZWF0ZWQsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIHRoaXMuZGVzdHJveSQsXG4gICAgKTtcbiAgfVxufVxuIl19