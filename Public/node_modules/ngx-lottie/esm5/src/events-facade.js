/**
 * @fileoverview added by tsickle
 * Generated from: src/events-facade.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __values } from "tslib";
import { Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
/**
 * Returns only those `EventEmitter` instances that has attached observers
 * @param {?} instance
 * @param {?} eventsMap
 * @return {?}
 */
function getObservedEventEmitters(instance, eventsMap) {
    return (Object.keys(instance)
        // `Object.entries` is not supported in IE11.
        .map((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return [key, instance[key]]; }))
        .filter((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], property = _b[1];
        return property instanceof EventEmitter &&
            property.observers.length > 0 &&
            eventsMap.hasOwnProperty(key);
    }))
        .map((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], eventEmitter = _b[1];
        return ({
            eventEmitter: eventEmitter,
            name: eventsMap[key],
        });
    })));
}
var LottieEventsFacade = /** @class */ (function () {
    function LottieEventsFacade(ngZone, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        /**
         * @see https://github.com/airbnb/lottie-web#events
         */
        this.eventsMap = {
            complete: 'complete',
            loopComplete: 'loopComplete',
            enterFrame: 'enterFrame',
            segmentStart: 'segmentStart',
            configReady: 'config_ready',
            dataReady: 'data_ready',
            domLoaded: 'DOMLoaded',
            destroy: 'destroy',
            error: 'error',
        };
        this.animationItem = null;
    }
    /**
     * @return {?}
     */
    LottieEventsFacade.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyAnimation();
    };
    /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListeners = /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    function (instance, animationItem) {
        var _this = this;
        this.animationItem = animationItem;
        // `AnimationItem` triggers different events every ms, we have to listen
        // them outside Angular's context, thus it won't affect performance
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return _this.addEventListenersToObservedEventEmitters(instance); }));
    };
    /**
     * @return {?}
     */
    LottieEventsFacade.prototype.destroyAnimation = /**
     * @return {?}
     */
    function () {
        // The `ng-lottie` component or the `lottie` directive can be destroyed
        // before the `animationItem` is set, thus it will fail with
        // `Cannot read property 'destroy' of null`.
        // Potentially it can happen if the directive gets destroyed before change
        // detection is run.
        if (isPlatformServer(this.platformId) || this.animationItem === null) {
            return;
        }
        // `destroy()` will remove all events listeners
        this.animationItem.destroy();
        this.animationItem = null;
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListenersToObservedEventEmitters = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var e_1, _a;
        /** @type {?} */
        var observedEmitters = getObservedEventEmitters(instance, this.eventsMap);
        var _loop_1 = function (name_1, eventEmitter) {
            (/** @type {?} */ (this_1.animationItem)).addEventListener(name_1, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                eventEmitter.emit(event);
            }));
        };
        var this_1 = this;
        try {
            for (var observedEmitters_1 = __values(observedEmitters), observedEmitters_1_1 = observedEmitters_1.next(); !observedEmitters_1_1.done; observedEmitters_1_1 = observedEmitters_1.next()) {
                var _b = observedEmitters_1_1.value, name_1 = _b.name, eventEmitter = _b.eventEmitter;
                _loop_1(name_1, eventEmitter);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (observedEmitters_1_1 && !observedEmitters_1_1.done && (_a = observedEmitters_1.return)) _a.call(observedEmitters_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LottieEventsFacade.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LottieEventsFacade.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return LottieEventsFacade;
}());
export { LottieEventsFacade };
if (false) {
    /**
     * @see https://github.com/airbnb/lottie-web#events
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.eventsMap;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.animationItem;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvZXZlbnRzLWZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWEsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7OztBQVFuRCxTQUFTLHdCQUF3QixDQUFDLFFBQXVCLEVBQUUsU0FBb0I7SUFDN0UsT0FBTyxDQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ25CLDZDQUE2QztTQUM1QyxHQUFHOzs7O0lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsRUFBQztTQUNoQyxNQUFNOzs7O0lBQ0wsVUFBQyxFQUFlO1lBQWYsa0JBQWUsRUFBZCxXQUFHLEVBQUUsZ0JBQVE7UUFDYixPQUFBLFFBQVEsWUFBWSxZQUFZO1lBQ2hDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDN0IsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFGN0IsQ0FFNkIsRUFDaEM7U0FDQSxHQUFHOzs7O0lBQUMsVUFBQyxFQUFtQjtZQUFuQixrQkFBbUIsRUFBbEIsV0FBRyxFQUFFLG9CQUFZO1FBQU0sT0FBQSxDQUFDO1lBQzdCLFlBQVksY0FBQTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDO1NBQ3JCLENBQUM7SUFINEIsQ0FHNUIsRUFBQyxDQUNOLENBQUM7QUFDSixDQUFDO0FBRUQ7SUFtQkUsNEJBQW9CLE1BQWMsRUFBK0IsVUFBa0I7UUFBL0QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUErQixlQUFVLEdBQVYsVUFBVSxDQUFROzs7O1FBZDNFLGNBQVMsR0FBYztZQUM3QixRQUFRLEVBQUUsVUFBVTtZQUNwQixZQUFZLEVBQUUsY0FBYztZQUM1QixVQUFVLEVBQUUsWUFBWTtZQUN4QixZQUFZLEVBQUUsY0FBYztZQUM1QixXQUFXLEVBQUUsY0FBYztZQUMzQixTQUFTLEVBQUUsWUFBWTtZQUN2QixTQUFTLEVBQUUsV0FBVztZQUN0QixPQUFPLEVBQUUsU0FBUztZQUNsQixLQUFLLEVBQUUsT0FBTztTQUNmLENBQUM7UUFFTSxrQkFBYSxHQUF5QixJQUFJLENBQUM7SUFFbUMsQ0FBQzs7OztJQUV2Rix3Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFFRCw4Q0FBaUI7Ozs7O0lBQWpCLFVBQWtCLFFBQXVCLEVBQUUsYUFBNEI7UUFBdkUsaUJBS0M7UUFKQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyx3RUFBd0U7UUFDeEUsbUVBQW1FO1FBQ25FLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLHdDQUF3QyxDQUFDLFFBQVEsQ0FBQyxFQUF2RCxDQUF1RCxFQUFDLENBQUM7SUFDL0YsQ0FBQzs7OztJQUVELDZDQUFnQjs7O0lBQWhCO1FBQ0UsdUVBQXVFO1FBQ3ZFLDREQUE0RDtRQUM1RCw0Q0FBNEM7UUFDNUMsMEVBQTBFO1FBQzFFLG9CQUFvQjtRQUNwQixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtZQUNwRSxPQUFPO1NBQ1I7UUFFRCwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFFTyxxRUFBd0M7Ozs7O0lBQWhELFVBQWlELFFBQXVCOzs7WUFDaEUsZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0NBRTlELE1BQUksRUFBRSxZQUFZO1lBQzdCLG1CQUFBLE9BQUssYUFBYSxFQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBSTs7OztZQUFFLFVBQUMsS0FBa0I7Z0JBQzVELFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxFQUFDLENBQUM7Ozs7WUFITCxLQUFxQyxJQUFBLHFCQUFBLFNBQUEsZ0JBQWdCLENBQUEsa0RBQUE7Z0JBQTFDLElBQUEsK0JBQXNCLEVBQXBCLGdCQUFJLEVBQUUsOEJBQVk7d0JBQWxCLE1BQUksRUFBRSxZQUFZO2FBSTlCOzs7Ozs7Ozs7SUFDSCxDQUFDOztnQkF2REYsVUFBVTs7OztnQkEzQnFCLE1BQU07NkNBOENDLE1BQU0sU0FBQyxXQUFXOztJQXFDekQseUJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXZEWSxrQkFBa0I7Ozs7Ozs7SUFJN0IsdUNBVUU7Ozs7O0lBRUYsMkNBQW1EOzs7OztJQUV2QyxvQ0FBc0I7Ozs7O0lBQUUsd0NBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBJbmplY3RhYmxlLCBOZ1pvbmUsIEluamVjdCwgRXZlbnRFbWl0dGVyLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEV2ZW50c01hcCwgTG90dGllRXZlbnQsIEFuaW1hdGlvbkl0ZW0gfSBmcm9tICcuL3N5bWJvbHMnO1xuXG4vKipcbiAqIFJldHVybnMgb25seSB0aG9zZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZXMgdGhhdCBoYXMgYXR0YWNoZWQgb2JzZXJ2ZXJzXG4gKi9cbmZ1bmN0aW9uIGdldE9ic2VydmVkRXZlbnRFbWl0dGVycyhpbnN0YW5jZTogQmFzZURpcmVjdGl2ZSwgZXZlbnRzTWFwOiBFdmVudHNNYXApIHtcbiAgcmV0dXJuIChcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZSlcbiAgICAgIC8vIGBPYmplY3QuZW50cmllc2AgaXMgbm90IHN1cHBvcnRlZCBpbiBJRTExLlxuICAgICAgLm1hcChrZXkgPT4gW2tleSwgaW5zdGFuY2Vba2V5XV0pXG4gICAgICAuZmlsdGVyKFxuICAgICAgICAoW2tleSwgcHJvcGVydHldKSA9PlxuICAgICAgICAgIHByb3BlcnR5IGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyICYmXG4gICAgICAgICAgcHJvcGVydHkub2JzZXJ2ZXJzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBldmVudHNNYXAuaGFzT3duUHJvcGVydHkoa2V5KSxcbiAgICAgIClcbiAgICAgIC5tYXAoKFtrZXksIGV2ZW50RW1pdHRlcl0pID0+ICh7XG4gICAgICAgIGV2ZW50RW1pdHRlcixcbiAgICAgICAgbmFtZTogZXZlbnRzTWFwW2tleV0sXG4gICAgICB9KSlcbiAgKTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvdHRpZUV2ZW50c0ZhY2FkZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvbG90dGllLXdlYiNldmVudHNcbiAgICovXG4gIHByaXZhdGUgZXZlbnRzTWFwOiBFdmVudHNNYXAgPSB7XG4gICAgY29tcGxldGU6ICdjb21wbGV0ZScsXG4gICAgbG9vcENvbXBsZXRlOiAnbG9vcENvbXBsZXRlJyxcbiAgICBlbnRlckZyYW1lOiAnZW50ZXJGcmFtZScsXG4gICAgc2VnbWVudFN0YXJ0OiAnc2VnbWVudFN0YXJ0JyxcbiAgICBjb25maWdSZWFkeTogJ2NvbmZpZ19yZWFkeScsXG4gICAgZGF0YVJlYWR5OiAnZGF0YV9yZWFkeScsXG4gICAgZG9tTG9hZGVkOiAnRE9NTG9hZGVkJyxcbiAgICBkZXN0cm95OiAnZGVzdHJveScsXG4gICAgZXJyb3I6ICdlcnJvcicsXG4gIH07XG5cbiAgcHJpdmF0ZSBhbmltYXRpb25JdGVtOiBBbmltYXRpb25JdGVtIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcpIHt9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95QW5pbWF0aW9uKCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZTogQmFzZURpcmVjdGl2ZSwgYW5pbWF0aW9uSXRlbTogQW5pbWF0aW9uSXRlbSk6IHZvaWQge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgLy8gYEFuaW1hdGlvbkl0ZW1gIHRyaWdnZXJzIGRpZmZlcmVudCBldmVudHMgZXZlcnkgbXMsIHdlIGhhdmUgdG8gbGlzdGVuXG4gICAgLy8gdGhlbSBvdXRzaWRlIEFuZ3VsYXIncyBjb250ZXh0LCB0aHVzIGl0IHdvbid0IGFmZmVjdCBwZXJmb3JtYW5jZVxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnNUb09ic2VydmVkRXZlbnRFbWl0dGVycyhpbnN0YW5jZSkpO1xuICB9XG5cbiAgZGVzdHJveUFuaW1hdGlvbigpOiB2b2lkIHtcbiAgICAvLyBUaGUgYG5nLWxvdHRpZWAgY29tcG9uZW50IG9yIHRoZSBgbG90dGllYCBkaXJlY3RpdmUgY2FuIGJlIGRlc3Ryb3llZFxuICAgIC8vIGJlZm9yZSB0aGUgYGFuaW1hdGlvbkl0ZW1gIGlzIHNldCwgdGh1cyBpdCB3aWxsIGZhaWwgd2l0aFxuICAgIC8vIGBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnZGVzdHJveScgb2YgbnVsbGAuXG4gICAgLy8gUG90ZW50aWFsbHkgaXQgY2FuIGhhcHBlbiBpZiB0aGUgZGlyZWN0aXZlIGdldHMgZGVzdHJveWVkIGJlZm9yZSBjaGFuZ2VcbiAgICAvLyBkZXRlY3Rpb24gaXMgcnVuLlxuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkgfHwgdGhpcy5hbmltYXRpb25JdGVtID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYGRlc3Ryb3koKWAgd2lsbCByZW1vdmUgYWxsIGV2ZW50cyBsaXN0ZW5lcnNcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uZGVzdHJveSgpO1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZEV2ZW50TGlzdGVuZXJzVG9PYnNlcnZlZEV2ZW50RW1pdHRlcnMoaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUpOiB2b2lkIHtcbiAgICBjb25zdCBvYnNlcnZlZEVtaXR0ZXJzID0gZ2V0T2JzZXJ2ZWRFdmVudEVtaXR0ZXJzKGluc3RhbmNlLCB0aGlzLmV2ZW50c01hcCk7XG5cbiAgICBmb3IgKGNvbnN0IHsgbmFtZSwgZXZlbnRFbWl0dGVyIH0gb2Ygb2JzZXJ2ZWRFbWl0dGVycykge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtIS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIChldmVudDogTG90dGllRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnRFbWl0dGVyLmVtaXQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=