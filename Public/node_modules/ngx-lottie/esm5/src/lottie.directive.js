/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Directive, Inject, Self, ElementRef, PLATFORM_ID, } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
var LottieDirective = /** @class */ (function (_super) {
    __extends(LottieDirective, _super);
    function LottieDirective(platformId, host, eventsFacade, animationLoader) {
        var _this = _super.call(this, platformId, animationLoader) || this;
        _this.host = host;
        _this.eventsFacade = eventsFacade;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LottieDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.loadAnimation.call(this, changes, this.host.nativeElement, this.eventsFacade, this);
    };
    LottieDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lottie]',
                    providers: [LottieEventsFacade],
                },] }
    ];
    /** @nocollapse */
    LottieDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef, decorators: [{ type: Self }] },
        { type: LottieEventsFacade, decorators: [{ type: Self }] },
        { type: AnimationLoader }
    ]; };
    return LottieDirective;
}(BaseDirective));
export { LottieDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LottieDirective.prototype.host;
    /**
     * @type {?}
     * @private
     */
    LottieDirective.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvbG90dGllLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixJQUFJLEVBQ0osVUFBVSxFQUNWLFdBQVcsR0FHWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJEO0lBSXFDLG1DQUFhO0lBQ2hELHlCQUN1QixVQUFrQixFQUN2QixJQUE2QixFQUM3QixZQUFnQyxFQUNoRCxlQUFnQztRQUpsQyxZQU1FLGtCQUFNLFVBQVUsRUFBRSxlQUFlLENBQUMsU0FDbkM7UUFMaUIsVUFBSSxHQUFKLElBQUksQ0FBeUI7UUFDN0Isa0JBQVksR0FBWixZQUFZLENBQW9COztJQUlsRCxDQUFDOzs7OztJQUVELHFDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxpQkFBTSxhQUFhLFlBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakYsQ0FBQzs7Z0JBaEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQ2hDOzs7OzZDQUdJLE1BQU0sU0FBQyxXQUFXO2dCQWhCckIsVUFBVSx1QkFpQlAsSUFBSTtnQkFUQSxrQkFBa0IsdUJBVXRCLElBQUk7Z0JBWEEsZUFBZTs7SUFvQnhCLHNCQUFDO0NBQUEsQUFqQkQsQ0FJcUMsYUFBYSxHQWFqRDtTQWJZLGVBQWU7Ozs7OztJQUd4QiwrQkFBNkM7Ozs7O0lBQzdDLHVDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0LFxuICBTZWxmLFxuICBFbGVtZW50UmVmLFxuICBQTEFURk9STV9JRCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsb3R0aWVdJyxcbiAgcHJvdmlkZXJzOiBbTG90dGllRXZlbnRzRmFjYWRlXSxcbn0pXG5leHBvcnQgY2xhc3MgTG90dGllRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBAU2VsZigpIHByaXZhdGUgaG9zdDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgQFNlbGYoKSBwcml2YXRlIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkxvYWRlcjogQW5pbWF0aW9uTG9hZGVyLFxuICApIHtcbiAgICBzdXBlcihwbGF0Zm9ybUlkLCBhbmltYXRpb25Mb2FkZXIpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHN1cGVyLmxvYWRBbmltYXRpb24oY2hhbmdlcywgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZXZlbnRzRmFjYWRlLCB0aGlzKTtcbiAgfVxufVxuIl19