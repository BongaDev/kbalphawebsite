/**
 * @fileoverview added by tsickle
 * Generated from: src/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, of } from 'rxjs';
import { map, publishReplay, refCount } from 'rxjs/operators';
/**
 * @param {?} animation
 * @return {?}
 */
export function transformAnimationFilenameToKey(animation) {
    return "animation-" + animation.split('.json')[0];
}
/**
 * @param {?} options
 * @param {?} container
 * @param {?} animationCache
 * @return {?}
 */
export function mergeOptionsWithDefault(options, container, animationCache) {
    /** @type {?} */
    var merged = Object.assign({
        container: container,
        renderer: 'svg',
        loop: true,
        autoplay: true,
    }, options);
    return animationCache !== null ? animationCache.transformOptions(merged) : merged;
}
/**
 * @param {?} options
 * @return {?}
 */
export function isAnimationConfigWithData(options) {
    /** @type {?} */
    var animationData = ((/** @type {?} */ (options))).animationData;
    return animationData !== null && typeof animationData === 'object';
}
/**
 * @param {?} animationCache
 * @param {?} options
 * @param {?} animationItem
 * @return {?}
 */
export function awaitConfigAndCache(animationCache, options, animationItem) {
    if (animationCache === null) {
        return;
    }
    animationItem.addEventListener('config_ready', (/**
     * @return {?}
     */
    function () {
        animationCache.set(options, animationItem);
    }));
}
/**
 * @param {?} player
 * @return {?}
 */
export function streamifyPlayerOrLoader(player) {
    /** @type {?} */
    var playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map((/**
         * @param {?} module
         * @return {?}
         */
        function (module) { return module.default || module; })), publishReplay(1), refCount());
    }
    else {
        return of(playerOrLoader);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBYTlELE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxTQUE0QjtJQUMxRSxPQUFPLGVBQWEsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUcsQ0FBQztBQUNwRCxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxPQUFnQyxFQUNoQyxTQUFzQixFQUN0QixjQUFxQzs7UUFFL0IsTUFBTSxHQUFzRCxNQUFNLENBQUMsTUFBTSxDQUM3RTtRQUNFLFNBQVMsV0FBQTtRQUNULFFBQVEsRUFBRSxLQUFLO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLEVBQ0QsT0FBTyxDQUNSO0lBRUQsT0FBTyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNwRixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FDdkMsT0FBMEQ7O1FBRXBELGFBQWEsR0FBRyxDQUFDLG1CQUFBLE9BQU8sRUFBMkIsQ0FBQyxDQUFDLGFBQWE7SUFDeEUsT0FBTyxhQUFhLEtBQUssSUFBSSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsQ0FBQztBQUNyRSxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxjQUFxQyxFQUNyQyxPQUEwRCxFQUMxRCxhQUE0QjtJQUU1QixJQUFJLGNBQWMsS0FBSyxJQUFJLEVBQUU7UUFDM0IsT0FBTztLQUNSO0lBRUQsYUFBYSxDQUFDLGdCQUFnQixDQUFDLGNBQWM7OztJQUFFO1FBQzdDLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLENBQUMsRUFBQyxDQUFDO0FBQ0wsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLE1BQW1DOztRQUU3QixjQUFjLEdBQUcsTUFBTSxFQUFFO0lBRS9CLElBQUksY0FBYyxZQUFZLE9BQU8sRUFBRTtRQUNyQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUc7Ozs7UUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxFQUF4QixDQUF3QixFQUFDLEVBQ3ZDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFDaEIsUUFBUSxFQUFFLENBQ1gsQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUMzQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tLCBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTG90dGllUGxheWVyLFxuICBBbmltYXRpb25PcHRpb25zLFxuICBBbmltYXRpb25GaWxlbmFtZSxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICBBbmltYXRpb25JdGVtLFxuICBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG59IGZyb20gJy4vc3ltYm9scyc7XG5pbXBvcnQgeyBBbmltYXRpb25DYWNoZSB9IGZyb20gJy4vYW5pbWF0aW9uLWNhY2hlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkoYW5pbWF0aW9uOiBBbmltYXRpb25GaWxlbmFtZSk6IHN0cmluZyB7XG4gIHJldHVybiBgYW5pbWF0aW9uLSR7YW5pbWF0aW9uLnNwbGl0KCcuanNvbicpWzBdfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdChcbiAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwsXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gIGFuaW1hdGlvbkNhY2hlOiBBbmltYXRpb25DYWNoZSB8IG51bGwsXG4pOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgY29uc3QgbWVyZ2VkOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoID0gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICBjb250YWluZXIsXG4gICAgICByZW5kZXJlcjogJ3N2ZycsXG4gICAgICBsb29wOiB0cnVlLFxuICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgfSxcbiAgICBvcHRpb25zLFxuICApO1xuXG4gIHJldHVybiBhbmltYXRpb25DYWNoZSAhPT0gbnVsbCA/IGFuaW1hdGlvbkNhY2hlLnRyYW5zZm9ybU9wdGlvbnMobWVyZ2VkKSA6IG1lcmdlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEoXG4gIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHwgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4pOiBvcHRpb25zIGlzIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHtcbiAgY29uc3QgYW5pbWF0aW9uRGF0YSA9IChvcHRpb25zIGFzIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhKS5hbmltYXRpb25EYXRhO1xuICByZXR1cm4gYW5pbWF0aW9uRGF0YSAhPT0gbnVsbCAmJiB0eXBlb2YgYW5pbWF0aW9uRGF0YSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdENvbmZpZ0FuZENhY2hlKFxuICBhbmltYXRpb25DYWNoZTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsLFxuICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoUGF0aCB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuICBhbmltYXRpb25JdGVtOiBBbmltYXRpb25JdGVtLFxuKTogdm9pZCB7XG4gIGlmIChhbmltYXRpb25DYWNoZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFuaW1hdGlvbkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY29uZmlnX3JlYWR5JywgKCkgPT4ge1xuICAgIGFuaW1hdGlvbkNhY2hlLnNldChvcHRpb25zLCBhbmltYXRpb25JdGVtKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJlYW1pZnlQbGF5ZXJPckxvYWRlcihcbiAgcGxheWVyOiBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG4pOiBPYnNlcnZhYmxlPExvdHRpZVBsYXllcj4ge1xuICBjb25zdCBwbGF5ZXJPckxvYWRlciA9IHBsYXllcigpO1xuXG4gIGlmIChwbGF5ZXJPckxvYWRlciBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICByZXR1cm4gZnJvbShwbGF5ZXJPckxvYWRlcikucGlwZShcbiAgICAgIG1hcChtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlKSxcbiAgICAgIHB1Ymxpc2hSZXBsYXkoMSksXG4gICAgICByZWZDb3VudCgpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9mKHBsYXllck9yTG9hZGVyKTtcbiAgfVxufVxuIl19